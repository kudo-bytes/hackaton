{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/chatgpt.service\";\nimport * as i2 from \"src/app/services/keywords.service\";\nconst _c0 = [\"question\"];\nexport class QuestionsComponent {\n  constructor(chatService, keywordsService) {\n    this.chatService = chatService;\n    this.keywordsService = keywordsService;\n    this.counter = 0;\n    this.isLoading = false;\n    this.keywords = this.keywordsService.getKeywords();\n    this.coreQuestion = {\n      \"role\": \"user\",\n      \"content\": \"I am the student, I have just finished school. Ask me aquestion to assess my interests and natural talent, skills and my ability to learn. In the end I need to understand what profession should I choose. Limit the characters to 100. Dont give me a feedback, just keep asking questions related to previous answer until I say to stop. Only ask me question that I could answer yes or no!\"\n    };\n    this.chat = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [this.coreQuestion]\n    };\n    this.triggerVideos = new EventEmitter();\n  }\n  ngOnInit() {\n    this.chatService.getQuestion(this.chat).subscribe(res => {\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n    });\n  }\n  concatAnswer(answer) {\n    this.chat.messages.push(answer);\n  }\n  answer(answer) {\n    this.counter++;\n    if (this.counter === 5) {\n      answer += `, Take a look at our conversation. I need 6 keywords that would relate to profession that I might like. Choose these keywords from this array ${this.keywords}. Return only 6 keywords in this format [keyword, keyword...]`;\n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer\n    };\n    this.concatAnswer(formattedAnswer);\n    this.sendAnswer();\n  }\n  sendAnswer() {\n    this.isLoading = true;\n    this.chatService.getQuestion(this.chat).subscribe(res => {\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n      this.isLoading = false;\n      if (this.counter === 5) {\n        const currentKeywords = questionText.split(\", \").map(item => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function QuestionsComponent_Factory(t) {\n    return new (t || QuestionsComponent)(i0.ɵɵdirectiveInject(i1.ChatgptService), i0.ɵɵdirectiveInject(i2.KeywordsService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionsComponent,\n    selectors: [[\"app-questions\"]],\n    viewQuery: function QuestionsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.question = _t.first);\n      }\n    },\n    outputs: {\n      triggerVideos: \"triggerVideos\"\n    },\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"container\"], [1, \"view-box\"], [1, \"view-content\"], [\"question\", \"\"], [1, \"btn-container\"], [3, \"disabled\", \"click\"]],\n    template: function QuestionsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", null, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_6_listener() {\n          return ctx.answer(\"no\");\n        });\n        i0.ɵɵtext(7, \"NO\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_8_listener() {\n          return ctx.answer(\"yes\");\n        });\n        i0.ɵɵtext(9, \"YES\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n      }\n    },\n    styles: [\".view-box[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 300px;\\n  height: 400px;\\n  border: 1px solid #000000;\\n  background: #EEEEEE;\\n}\\n\\n.view-content[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  flex-grow: 1;\\n  display: flex;\\n  align-items: center;\\n  text-align: center;\\n}\\n\\n.btn-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  padding: 10px;\\n}\\n.btn-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n}\\n\\n@media only screen and (max-width: 767px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    height: 300px;\\n    width: 300px;\\n  }\\n}\\n@media only screen and (min-width: 768px) and (max-width: 1023px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 600px;\\n    height: 600px;\\n  }\\n}\\n@media only screen and (min-width: 1024px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 800px;\\n    height: 800px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9xdWVzdGlvbnMvcXVlc3Rpb25zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxhQUFBO0FBQ0Y7QUFBRTtFQUNFLGtCQUFBO0VBQ0EsaUJBQUE7QUFFSjs7QUFFQTtFQUNFLDhCQUFBO0VBQ0E7SUFDRSxhQUFBO0lBQ0EsWUFBQTtFQUNGO0FBQ0Y7QUFFQTtFQUNFLHVCQUFBO0VBQ0E7SUFDRSxZQUFBO0lBQ0EsYUFBQTtFQUFGO0FBQ0Y7QUFHQTtFQUNFLHVCQUFBO0VBQ0E7SUFDRSxZQUFBO0lBQ0EsYUFBQTtFQURGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIudmlldy1ib3gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogMzAwcHg7XG4gIGhlaWdodDogNDAwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDAwMDA7XG4gIGJhY2tncm91bmQ6ICNFRUVFRUU7XG59XG5cbi52aWV3LWNvbnRlbnQge1xuICBwYWRkaW5nOiAxMHB4O1xuICBmbGV4LWdyb3c6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmJ0bi1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAxMHB4O1xuICBidXR0b246Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC8qIHN0eWxlcyBmb3IgbW9iaWxlIGRldmljZXMgKi9cbiAgLnZpZXctYm94IHtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICAgIHdpZHRoOiAzMDBweDtcbiAgfVxufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XG4gIC8qIHN0eWxlcyBmb3IgdGFibGV0cyAqL1xuICAudmlldy1ib3gge1xuICAgIHdpZHRoOiA2MDBweDtcbiAgICBoZWlnaHQ6IDYwMHB4O1xuICB9XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gIC8qIHN0eWxlcyBmb3IgZGVza3RvcCAqL1xuICAudmlldy1ib3gge1xuICAgIHdpZHRoOiA4MDBweDtcbiAgICBoZWlnaHQ6IDgwMHB4O1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","QuestionsComponent","constructor","chatService","keywordsService","getKeywords","coreQuestion","ngOnInit","getQuestion","chat","subscribe","res","counter","question","choices","message","concatAnswer","questionText","content","nativeElement","innerText","answer","messages","push","keywords","formattedAnswer","sendAnswer","isLoading","currentKeywords","split","map","item","trim","triggerVideos","emit","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.ts","/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { ChatgptService } from 'src/app/services/chatgpt.service';\nimport { KeywordsService } from 'src/app/services/keywords.service';\n\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n  counter = 0;\n  isLoading = false;\n  keywords = this.keywordsService.getKeywords();\n  coreQuestion = {\n    \"role\": \"user\",\n    \"content\": \"I am the student, I have just finished school. Ask me aquestion to assess my interests and natural talent, skills and my ability to learn. In the end I need to understand what profession should I choose. Limit the characters to 100. Dont give me a feedback, just keep asking questions related to previous answer until I say to stop. Only ask me question that I could answer yes or no!\",\n  };\n  chat = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [this.coreQuestion],\n  };\n\n  @ViewChild('question') question!: ElementRef;\n  @Output('triggerVideos') triggerVideos = new EventEmitter<string[]>();\n\n  constructor(\n    private chatService: ChatgptService,\n    private keywordsService: KeywordsService,\n  ) {}\n\n  ngOnInit(): void {\n    this.chatService.getQuestion(this.chat).subscribe((res: any) => {\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n    });\n  }\n\n  concatAnswer(answer: any) {\n    this.chat.messages.push(answer);\n  }\n\n  answer(answer: string) {\n    this.counter++;\n    if (this.counter === 5) {\n      answer += `, Take a look at our conversation. I need 6 keywords that would relate to profession that I might like. Choose these keywords from this array ${this.keywords}. Return only 6 keywords in this format [keyword, keyword...]`;  \n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer,\n    }\n\n    this.concatAnswer(formattedAnswer);\n    this.sendAnswer();\n  }\n\n  sendAnswer() {\n    this.isLoading = true;\n    \n    this.chatService.getQuestion(this.chat).subscribe((res: any) => {\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content; \n      this.question.nativeElement.innerText = questionText;\n\n      this.isLoading = false;\n\n      if (this.counter === 5) {\n        const currentKeywords = questionText.split(\", \").map((item: any) => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"view-box\">\n    <div class=\"view-content\">\n      <div #question></div>\n    </div>\n    <div class=\"btn-container\">\n      <button [disabled]=\"isLoading\" (click)=\"answer('no')\">NO</button>\n      <button [disabled]=\"isLoading\" (click)=\"answer('yes')\">YES</button>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}