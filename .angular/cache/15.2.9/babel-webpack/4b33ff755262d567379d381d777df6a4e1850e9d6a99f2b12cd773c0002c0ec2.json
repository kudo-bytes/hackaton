{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/chatgpt.service\";\nimport * as i2 from \"src/app/services/keywords.service\";\nexport class QuestionsComponent {\n  constructor(chatService, keywordsService) {\n    this.chatService = chatService;\n    this.keywordsService = keywordsService;\n    this.counter = 0;\n    this.isLoading = false;\n    this.keywords = this.keywordsService.getKeywords();\n    this.displayedQuestion = \"\";\n    this.coreQuestion = {\n      \"role\": \"user\",\n      \"content\": \"I am the student, I have just finished school... (rest of the content remains same)\"\n    };\n    this.chat = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [this.coreQuestion]\n    };\n    this.triggerVideos = new EventEmitter();\n  }\n  ngOnInit() {\n    this.getAndDisplayQuestion();\n  }\n  concatAnswer(answer) {\n    this.chat.messages.push(answer);\n  }\n  answer(answer) {\n    this.counter++;\n    if (this.counter === 5) {\n      answer += `, Take a look at our conversation... (rest of the content remains same)`;\n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer\n    };\n    this.concatAnswer(formattedAnswer);\n    this.getAndDisplayQuestion();\n  }\n  getAndDisplayQuestion() {\n    this.isLoading = true;\n    this.chatService.getQuestion(this.chat).subscribe(res => {\n      const {\n        content\n      } = res.choices[0].message;\n      this.concatAnswer(res.choices[0].message);\n      this.displayedQuestion = content;\n      this.isLoading = false;\n      if (this.counter === 5) {\n        const currentKeywords = content.split(\", \").map(item => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function QuestionsComponent_Factory(t) {\n    return new (t || QuestionsComponent)(i0.ɵɵdirectiveInject(i1.ChatgptService), i0.ɵɵdirectiveInject(i2.KeywordsService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionsComponent,\n    selectors: [[\"app-questions\"]],\n    outputs: {\n      triggerVideos: \"triggerVideos\"\n    },\n    decls: 10,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"view-box\"], [1, \"view-content\"], [1, \"btn-container\"], [3, \"disabled\", \"click\"]],\n    template: function QuestionsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\")(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_6_listener() {\n          return ctx.answer(\"no\");\n        });\n        i0.ɵɵtext(7, \"NO\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_8_listener() {\n          return ctx.answer(\"yes\");\n        });\n        i0.ɵɵtext(9, \"YES\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.displayedQuestion, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n      }\n    },\n    styles: [\".view-box[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 300px;\\n  height: 400px;\\n  border: 1px solid #000000;\\n  background: #EEEEEE;\\n}\\n\\n.view-content[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  flex-grow: 1;\\n  display: flex;\\n  align-items: center;\\n  text-align: center;\\n}\\n\\n.btn-container[_ngcontent-%COMP%] {\\n  padding: 10px 10px 0;\\n  height: 40px;\\n}\\n.btn-container[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n@media only screen and (max-width: 767px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    height: 300px;\\n    width: 300px;\\n  }\\n}\\n@media only screen and (min-width: 768px) and (max-width: 1023px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 600px;\\n    height: 600px;\\n  }\\n}\\n@media only screen and (min-width: 1024px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 800px;\\n    height: 800px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9xdWVzdGlvbnMvcXVlc3Rpb25zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxvQkFBQTtFQUNBLFlBQUE7QUFDRjtBQUFFO0VBQ0UsYUFBQTtFQUNBLDhCQUFBO0FBRUo7O0FBRUE7RUFDRSw4QkFBQTtFQUNBO0lBQ0UsYUFBQTtJQUNBLFlBQUE7RUFDRjtBQUNGO0FBRUE7RUFDRSx1QkFBQTtFQUNBO0lBQ0UsWUFBQTtJQUNBLGFBQUE7RUFBRjtBQUNGO0FBR0E7RUFDRSx1QkFBQTtFQUNBO0lBQ0UsWUFBQTtJQUNBLGFBQUE7RUFERjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLnZpZXctYm94IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDMwMHB4O1xuICBoZWlnaHQ6IDQwMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwO1xuICBiYWNrZ3JvdW5kOiAjRUVFRUVFO1xufVxuXG4udmlldy1jb250ZW50IHtcbiAgcGFkZGluZzogMTBweDtcbiAgZmxleC1ncm93OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5idG4tY29udGFpbmVyIHtcbiAgcGFkZGluZzogMTBweCAxMHB4IDA7XG4gIGhlaWdodDogNDBweDtcbiAgZGl2IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC8qIHN0eWxlcyBmb3IgbW9iaWxlIGRldmljZXMgKi9cbiAgLnZpZXctYm94IHtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICAgIHdpZHRoOiAzMDBweDtcbiAgfVxufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XG4gIC8qIHN0eWxlcyBmb3IgdGFibGV0cyAqL1xuICAudmlldy1ib3gge1xuICAgIHdpZHRoOiA2MDBweDtcbiAgICBoZWlnaHQ6IDYwMHB4O1xuICB9XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gIC8qIHN0eWxlcyBmb3IgZGVza3RvcCAqL1xuICAudmlldy1ib3gge1xuICAgIHdpZHRoOiA4MDBweDtcbiAgICBoZWlnaHQ6IDgwMHB4O1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAoCA,YAAY,QAAQ,eAAe;;;;AASvE,OAAM,MAAOC,kBAAkB;EAgB7BC,YACUC,WAA2B,EAC3BC,eAAgC;IADhC,gBAAW,GAAXD,WAAW;IACX,oBAAe,GAAfC,eAAe;IAjBzB,YAAO,GAAG,CAAC;IACX,cAAS,GAAG,KAAK;IACjB,aAAQ,GAAG,IAAI,CAACA,eAAe,CAACC,WAAW,EAAE;IAC7C,sBAAiB,GAAW,EAAE;IAC9B,iBAAY,GAAG;MACb,MAAM,EAAE,MAAM;MACd,SAAS,EAAE;KACZ;IACD,SAAI,GAAG;MACL,OAAO,EAAE,eAAe;MACxB,UAAU,EAAE,CAAC,IAAI,CAACC,YAAY;KAC/B;IAES,kBAAa,GAAG,IAAIN,YAAY,EAAY;EAKnD;EAEHO,QAAQ;IACN,IAAI,CAACC,qBAAqB,EAAE;EAC9B;EAEAC,YAAY,CAACC,MAAW;IACtB,IAAI,CAACC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACH,MAAM,CAAC;EACjC;EAEAA,MAAM,CAACA,MAAc;IACnB,IAAI,CAACI,OAAO,EAAE;IACd,IAAI,IAAI,CAACA,OAAO,KAAK,CAAC,EAAE;MACtBJ,MAAM,IAAI,yEAAyE;;IAErF,MAAMK,eAAe,GAAG;MACtB,MAAM,EAAE,MAAM;MACd,SAAS,EAAEL;KACZ;IACD,IAAI,CAACD,YAAY,CAACM,eAAe,CAAC;IAClC,IAAI,CAACP,qBAAqB,EAAE;EAC9B;EAEAA,qBAAqB;IACnB,IAAI,CAACQ,SAAS,GAAG,IAAI;IACrB,IAAI,CAACb,WAAW,CAACc,WAAW,CAAC,IAAI,CAACN,IAAI,CAAC,CAACO,SAAS,CAAEC,GAAQ,IAAI;MAC7D,MAAM;QAAEC;MAAO,CAAE,GAAGD,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO;MAC1C,IAAI,CAACb,YAAY,CAACU,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC;MACzC,IAAI,CAACC,iBAAiB,GAAGH,OAAO;MAEhC,IAAI,CAACJ,SAAS,GAAG,KAAK;MAEtB,IAAI,IAAI,CAACF,OAAO,KAAK,CAAC,EAAE;QACtB,MAAMU,eAAe,GAAGJ,OAAO,CAACK,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,IAAY,IAAKA,IAAI,CAACC,IAAI,EAAE,CAAC;QAC9E,IAAI,CAACC,aAAa,CAACC,IAAI,CAACN,eAAe,CAAC;;IAE5C,CAAC,CAAC;EACJ;EAAC;qBAxDUvB,kBAAkB;EAAA;EAAA;UAAlBA,kBAAkB;IAAA8B;IAAAC;MAAAH;IAAA;IAAAI;IAAAC;IAAAC;IAAAC;MAAA;QCT/BC,8BAAuB;QAGjBA,YACF;QAAAA,iBAAM;QACNA,8BAA2B;QAEQA;UAAA,OAASC,WAAO,IAAI,CAAC;QAAA,EAAC;QAACD,kBAAE;QAAAA,iBAAS;QACjEA,iCAAuD;QAAxBA;UAAA,OAASC,WAAO,KAAK,CAAC;QAAA,EAAC;QAACD,mBAAG;QAAAA,iBAAS;;;QALrEA,eACF;QADEA,sDACF;QAGYA,eAAsB;QAAtBA,wCAAsB;QACtBA,eAAsB;QAAtBA,wCAAsB","names":["EventEmitter","QuestionsComponent","constructor","chatService","keywordsService","getKeywords","coreQuestion","ngOnInit","getAndDisplayQuestion","concatAnswer","answer","chat","messages","push","counter","formattedAnswer","isLoading","getQuestion","subscribe","res","content","choices","message","displayedQuestion","currentKeywords","split","map","item","trim","triggerVideos","emit","selectors","outputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.ts","/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.html"],"sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { ChatgptService } from 'src/app/services/chatgpt.service';\nimport { KeywordsService } from 'src/app/services/keywords.service';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n  counter = 0;\n  isLoading = false;\n  keywords = this.keywordsService.getKeywords();\n  displayedQuestion: string = \"\";\n  coreQuestion = {\n    \"role\": \"user\",\n    \"content\": \"I am the student, I have just finished school... (rest of the content remains same)\"\n  };\n  chat = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [this.coreQuestion],\n  };\n\n  @Output() triggerVideos = new EventEmitter<string[]>();\n\n  constructor(\n    private chatService: ChatgptService,\n    private keywordsService: KeywordsService,\n  ) {}\n\n  ngOnInit(): void {\n    this.getAndDisplayQuestion();\n  }\n\n  concatAnswer(answer: any) {\n    this.chat.messages.push(answer);\n  }\n\n  answer(answer: string) {\n    this.counter++;\n    if (this.counter === 5) {\n      answer += `, Take a look at our conversation... (rest of the content remains same)`;  \n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer,\n    }\n    this.concatAnswer(formattedAnswer);\n    this.getAndDisplayQuestion();\n  }\n\n  getAndDisplayQuestion(): void {\n    this.isLoading = true;\n    this.chatService.getQuestion(this.chat).subscribe((res: any) => {\n      const { content } = res.choices[0].message;\n      this.concatAnswer(res.choices[0].message);\n      this.displayedQuestion = content;\n\n      this.isLoading = false;\n\n      if (this.counter === 5) {\n        const currentKeywords = content.split(\", \").map((item: string) => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <div class=\"view-box\">\n    <div class=\"view-content\">\n      {{ displayedQuestion }}\n    </div>\n    <div class=\"btn-container\">\n      <div>\n        <button [disabled]=\"isLoading\" (click)=\"answer('no')\">NO</button>\n        <button [disabled]=\"isLoading\" (click)=\"answer('yes')\">YES</button>\n      </div>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}