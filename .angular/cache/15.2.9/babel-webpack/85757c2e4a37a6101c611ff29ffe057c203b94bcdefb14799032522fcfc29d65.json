{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/chatgpt.service\";\nimport * as i2 from \"src/app/services/keywords.service\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"question\"];\nfunction QuestionsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction QuestionsComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Question \", ctx_r1.counter, \" \");\n  }\n}\nexport class QuestionsComponent {\n  constructor(chatService, keywordsService) {\n    this.chatService = chatService;\n    this.keywordsService = keywordsService;\n    this.counter = 0;\n    this.isAppLoading = true;\n    this.isLoading = false;\n    this.keywords = this.keywordsService.getKeywords();\n    this.coreQuestion = {\n      \"role\": \"user\",\n      \"content\": \"I am the student, I have just finished school. Ask me aquestion to assess my interests and natural talent, skills and my ability to learn. In the end I need to understand what profession should I choose. Limit the characters to 100. Dont give me a feedback, just keep asking questions related to previous answer until I say to stop. Only ask me question that I could answer yes or no!\"\n    };\n    this.chat = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [this.coreQuestion]\n    };\n    this.triggerVideos = new EventEmitter();\n  }\n  ngOnInit() {\n    this.chatService.getQuestion(this.chat).subscribe(res => {\n      this.isAppLoading = false;\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n    });\n  }\n  concatAnswer(answer) {\n    this.chat.messages.push(answer);\n  }\n  answer(answer) {\n    if (this.counter + 1 === 5) {\n      answer += `, Take a look at our conversation. I need 6 keywords that would relate to profession that I might like. Choose these keywords from this array ${this.keywords}. Return only 6 keywords in this format [keyword, keyword...]`;\n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer\n    };\n    this.concatAnswer(formattedAnswer);\n    this.sendAnswer();\n  }\n  sendAnswer() {\n    this.isLoading = true;\n    this.chatService.getQuestion(this.chat).subscribe(res => {\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n      this.isLoading = false;\n      if (this.counter === 5) {\n        const currentKeywords = questionText.split(\", \").map(item => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function QuestionsComponent_Factory(t) {\n    return new (t || QuestionsComponent)(i0.ɵɵdirectiveInject(i1.ChatgptService), i0.ɵɵdirectiveInject(i2.KeywordsService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionsComponent,\n    selectors: [[\"app-questions\"]],\n    viewQuery: function QuestionsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.question = _t.first);\n      }\n    },\n    outputs: {\n      triggerVideos: \"triggerVideos\"\n    },\n    decls: 12,\n    vars: 4,\n    consts: [[1, \"container\"], [1, \"view-box\"], [1, \"view-content\"], [\"class\", \"title\", 4, \"ngIf\"], [\"question\", \"\"], [1, \"btn-container\"], [3, \"disabled\", \"click\"], [1, \"title\"]],\n    template: function QuestionsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, QuestionsComponent_div_3_Template, 2, 0, \"div\", 3);\n        i0.ɵɵtemplate(4, QuestionsComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelement(5, \"div\", null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_8_listener() {\n          return ctx.answer(\"yes\");\n        });\n        i0.ɵɵtext(9, \"YES\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function QuestionsComponent_Template_button_click_10_listener() {\n          return ctx.answer(\"no\");\n        });\n        i0.ɵɵtext(11, \"NO\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isAppLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isAppLoading);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\".view-box[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 300px;\\n  height: 400px;\\n  border: 1px solid #000000;\\n  background: #EEEEEE;\\n}\\n\\n.view-content[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  flex-grow: 1;\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n}\\n.view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:first-child {\\n  padding-top: 20px;\\n  margin-bottom: 20px;\\n  font-size: 20px;\\n}\\n.view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:last-child {\\n  flex-grow: 1;\\n  font-weight: 300;\\n}\\n\\n.btn-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  padding: 10px 10px 20px;\\n  font-weight: bold;\\n}\\n.btn-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\\n  margin-bottom: 5px;\\n}\\n.btn-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child {\\n  background-color: #FF8A00;\\n}\\n\\n@media only screen and (max-width: 767px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    height: 300px;\\n    width: 300px;\\n  }\\n}\\n@media only screen and (min-width: 768px) and (max-width: 1023px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 600px;\\n    height: 550px;\\n  }\\n  .view-content[_ngcontent-%COMP%] {\\n    padding: 20px 20px 0;\\n    margin-bottom: 30px;\\n  }\\n  .view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:first-child {\\n    padding-top: 20px;\\n    margin-bottom: 20px;\\n    font-size: 30px;\\n  }\\n  .view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:last-child {\\n    font-size: 24px;\\n  }\\n  .btn-container[_ngcontent-%COMP%] {\\n    padding: 20px 20px 30px;\\n  }\\n  .btn-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\\n    margin-bottom: 10px;\\n  }\\n}\\n@media only screen and (min-width: 1024px) {\\n  \\n  .view-box[_ngcontent-%COMP%] {\\n    width: 800px;\\n    height: 700px;\\n  }\\n  .view-content[_ngcontent-%COMP%] {\\n    padding: 30px 30px 0;\\n  }\\n  .view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:first-child {\\n    padding-top: 20px;\\n    margin-bottom: 30px;\\n    font-size: 35px;\\n  }\\n  .view-content[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:last-child {\\n    font-size: 28px;\\n  }\\n  .btn-container[_ngcontent-%COMP%] {\\n    padding: 20px 20px 30px;\\n  }\\n  .btn-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\\n    margin-bottom: 10px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9xdWVzdGlvbnMvcXVlc3Rpb25zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7QUFBRTtFQUNFLGlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FBRUo7QUFBRTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUVKOztBQUVBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxpQkFBQTtBQUNGO0FBQ0k7RUFDRSxrQkFBQTtBQUNOO0FBQ0k7RUFDRSx5QkFBQTtBQUNOOztBQUlBO0VBQ0UsOEJBQUE7RUFDQTtJQUNFLGFBQUE7SUFDQSxZQUFBO0VBREY7QUFDRjtBQUlBO0VBQ0UsdUJBQUE7RUFDQTtJQUNFLFlBQUE7SUFDQSxhQUFBO0VBRkY7RUFLQTtJQUNFLG9CQUFBO0lBQ0EsbUJBQUE7RUFIRjtFQUlFO0lBQ0UsaUJBQUE7SUFDQSxtQkFBQTtJQUNBLGVBQUE7RUFGSjtFQUlFO0lBQ0UsZUFBQTtFQUZKO0VBTUE7SUFDRSx1QkFBQTtFQUpGO0VBTUk7SUFDRSxtQkFBQTtFQUpOO0FBQ0Y7QUFTQTtFQUNFLHVCQUFBO0VBQ0E7SUFDRSxZQUFBO0lBQ0EsYUFBQTtFQVBGO0VBVUE7SUFDRSxvQkFBQTtFQVJGO0VBU0U7SUFDRSxpQkFBQTtJQUNBLG1CQUFBO0lBQ0EsZUFBQTtFQVBKO0VBU0U7SUFDRSxlQUFBO0VBUEo7RUFXQTtJQUNFLHVCQUFBO0VBVEY7RUFXSTtJQUNFLG1CQUFBO0VBVE47QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi52aWV3LWJveCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAzMDBweDtcbiAgaGVpZ2h0OiA0MDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDtcbiAgYmFja2dyb3VuZDogI0VFRUVFRTtcbn1cblxuLnZpZXctY29udGVudCB7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGZsZXgtZ3JvdzogMTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBkaXY6Zmlyc3QtY2hpbGQge1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG4gIGRpdjpsYXN0LWNoaWxkIHtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgfVxufVxuXG4uYnRuLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDEwcHggMTBweCAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgYnV0dG9uIHtcbiAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICB9XG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjhBMDA7XG4gICAgfVxuICB9XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgLyogc3R5bGVzIGZvciBtb2JpbGUgZGV2aWNlcyAqL1xuICAudmlldy1ib3gge1xuICAgIGhlaWdodDogMzAwcHg7XG4gICAgd2lkdGg6IDMwMHB4O1xuICB9XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcbiAgLyogc3R5bGVzIGZvciB0YWJsZXRzICovXG4gIC52aWV3LWJveCB7XG4gICAgd2lkdGg6IDYwMHB4O1xuICAgIGhlaWdodDogNTUwcHg7XG4gIH1cblxuICAudmlldy1jb250ZW50IHtcbiAgICBwYWRkaW5nOiAyMHB4IDIwcHggMDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIGRpdjpmaXJzdC1jaGlsZCB7XG4gICAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgfVxuICAgIGRpdjpsYXN0LWNoaWxkIHtcbiAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICB9XG4gIH1cblxuICAuYnRuLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMjBweCAyMHB4IDMwcHg7XG4gICAgYnV0dG9uIHtcbiAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAvKiBzdHlsZXMgZm9yIGRlc2t0b3AgKi9cbiAgLnZpZXctYm94IHtcbiAgICB3aWR0aDogODAwcHg7XG4gICAgaGVpZ2h0OiA3MDBweDtcbiAgfVxuXG4gIC52aWV3LWNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDMwcHggMzBweCAwO1xuICAgIGRpdjpmaXJzdC1jaGlsZCB7XG4gICAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgICBmb250LXNpemU6IDM1cHg7XG4gICAgfVxuICAgIGRpdjpsYXN0LWNoaWxkIHtcbiAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICB9XG4gIH1cblxuICAuYnRuLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMjBweCAyMHB4IDMwcHg7XG4gICAgYnV0dG9uIHtcbiAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","QuestionsComponent","constructor","chatService","keywordsService","getKeywords","coreQuestion","ngOnInit","getQuestion","chat","subscribe","res","isAppLoading","counter","question","choices","message","concatAnswer","questionText","content","nativeElement","innerText","answer","messages","push","keywords","formattedAnswer","sendAnswer","isLoading","currentKeywords","split","map","item","trim","triggerVideos","emit","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.ts","/Users/denys/Coding/hackaton-current/hackaton/src/app/components/questions/questions.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { ChatgptService } from 'src/app/services/chatgpt.service';\nimport { KeywordsService } from 'src/app/services/keywords.service';\n\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n  counter = 0;\n  isAppLoading = true;\n  isLoading = false;\n  keywords = this.keywordsService.getKeywords();\n  coreQuestion = {\n    \"role\": \"user\",\n    \"content\": \"I am the student, I have just finished school. Ask me aquestion to assess my interests and natural talent, skills and my ability to learn. In the end I need to understand what profession should I choose. Limit the characters to 100. Dont give me a feedback, just keep asking questions related to previous answer until I say to stop. Only ask me question that I could answer yes or no!\",\n  };\n  chat = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [this.coreQuestion],\n  };\n\n  @ViewChild('question') question!: ElementRef;\n  @Output('triggerVideos') triggerVideos = new EventEmitter<string[]>();\n\n  constructor(\n    private chatService: ChatgptService,\n    private keywordsService: KeywordsService,\n  ) {}\n\n  ngOnInit(): void {\n    this.chatService.getQuestion(this.chat).subscribe((res: any) => {\n      this.isAppLoading = false;\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content;\n      this.question.nativeElement.innerText = questionText;\n    });\n  }\n\n  concatAnswer(answer: any) {\n    this.chat.messages.push(answer);\n  }\n\n  answer(answer: string) {\n    if (this.counter + 1 === 5) {\n      answer += `, Take a look at our conversation. I need 6 keywords that would relate to profession that I might like. Choose these keywords from this array ${this.keywords}. Return only 6 keywords in this format [keyword, keyword...]`;  \n    }\n    const formattedAnswer = {\n      \"role\": \"user\",\n      \"content\": answer,\n    }\n\n    this.concatAnswer(formattedAnswer);\n    this.sendAnswer();\n  }\n\n  sendAnswer() {\n    this.isLoading = true;\n    \n    this.chatService.getQuestion(this.chat).subscribe((res: any) => {\n      this.counter++;\n      const question = res.choices[0].message;\n      this.concatAnswer(question);\n      const questionText = question.content; \n      this.question.nativeElement.innerText = questionText;\n\n      this.isLoading = false;\n\n      if (this.counter === 5) {\n        const currentKeywords = questionText.split(\", \").map((item: any) => item.trim());\n        this.triggerVideos.emit(currentKeywords);\n      }\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"view-box\">\n    <div class=\"view-content\">\n      <div *ngIf=\"isAppLoading\" class=\"title\">Loading...</div>\n      <div *ngIf=\"!isAppLoading\" class=\"title\">Question {{counter}} </div>\n      <div #question></div>\n    </div>\n    <div class=\"btn-container\">\n      <button [disabled]=\"isLoading\" (click)=\"answer('yes')\">YES</button>\n      <button [disabled]=\"isLoading\" (click)=\"answer('no')\">NO</button>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}